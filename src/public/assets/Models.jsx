/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 .\src\assets\WawaOffice.glb 
*/
import * as THREE from 'three'

import React, { useLayoutEffect, useRef } from 'react'
import { Html, useGLTF, useScroll } from '@react-three/drei'
import gsap from 'gsap';
import { useFrame, useLoader } from '@react-three/fiber';
import img1 from './md-v.png'
import img2 from './md-h.png'
import img3 from './ctv.png'
import img4 from './ipad.png'



export const INIT_X_POS = 0;
export const INIT_Y_POS = 0;
export const INIT_Z_POS = 0;
export const FLOOR_HEIGHT = 8;
export const NB_FLOORS = 4;


export function Models(props) {

const { nodes, materials } = useGLTF('./src/public/assets/bread_pack.glb')
const ref = useRef(); // useRef é um React Hook que mantém um valor que nao é utilizado no render e permite referenciá-lo  
const tl = useRef(); // tl é uma referência que será utilizada adiante para representar a 'linha do tempo' das animações, a qual estará ligada ao scroll da página
const bloco01 = useRef();
const bloco02 = useRef();
const bloco03 = useRef();
const bloco04 = useRef();


const scroll = useScroll();

useFrame( () => {
  tl.current.seek(scroll.offset * tl.current.duration()); 
});

useLayoutEffect( () => {

  tl.current = gsap.timeline(); // criamos um parâmetro em tl que é do tipo gsap.timeline(), que é utilizada para controlar as animações
  // // https://gsap.com/docs/v3/GSAP/gsap.timeline()/

  //VERTICAL ANIMATION
  tl.current.to(
      ref.current.position,
      {
          duration:1, 
          y: -FLOOR_HEIGHT, 
          x: -1,
      },
      0
  );
  tl.current.to(
      ref.current.rotation,
      {
          duration:1, 
          y: -Math.PI/12, 
      },
      0
  );
  tl.current.to(
      bloco02.current.rotation,
      {
          duration:1, 
          y: Math.PI/6, 
      },
      0
  );


  tl.current.to(
      ref.current.position,
      {
          duration:1, 
          y: -FLOOR_HEIGHT* 2, 
          x: 0,
      },
      1
  );
  tl.current.to(
    ref.current.rotation,
    {
        duration:1, 
        y: Math.PI/12, 
    },
    1
  );
  tl.current.to(
    bloco03.current.rotation,
    {
        duration:1, 
        y: -Math.PI/10, 
    },
    1
  );

  tl.current.to(
      ref.current.position,
      {
          duration:1, 
          y: -FLOOR_HEIGHT* 3, 
          x: -0.5,
      },
      2
  );
  tl.current.to(
    ref.current.rotation,
    {
        duration:1, 
        y: -Math.PI/12, 
    },
    2
  );
  tl.current.to(
    bloco04.current.rotation,
    {
        duration:1, 
        y: Math.PI/6, 
    },
    2
  );


}, []
);
const texture1 = useLoader(THREE.TextureLoader, img1);
const texture2 = useLoader(THREE.TextureLoader, img2);
const texture3 = useLoader(THREE.TextureLoader, img3);
const texture4 = useLoader(THREE.TextureLoader, img4);


return (

  <group {...props} 
  dispose={null}
  ref={ref}
  position={[INIT_X_POS, INIT_Y_POS , INIT_Z_POS]}
  rotation= {[0, 0 ,0]}
  >
    
    

    <group
    position={[0,0,0]}
    rotation={[0, 0, 0]}
    ref={bloco01}
    >
      
    {/* <mesh geometry={nodes.bread002.geometry} 
      material={materials.bread01a} 
      scale={0.25} > */}
      
      

    <mesh>  
      <boxGeometry args={[2.9, 5.1, 0.25]} />
      <meshBasicMaterial color='#445577' />
    </mesh>
    <mesh
    position={[0,0,0.126]}>  
      <planeGeometry args={[2.8, 5]} />
      <meshBasicMaterial attach="material" map={texture1} toneMapped={false}/>
    </mesh>
    </group>
    

    <group
    position={[0, FLOOR_HEIGHT, 0]} 
    rotation={[0, Math.PI/8, 0]} 
    ref={bloco02}
    > 
      <mesh>  
      <boxGeometry args={[5.1, 2.9, 0.25]} />
      <meshBasicMaterial color='#445577' />
    </mesh>
    <mesh
    position={[0,0,0.126]}>  
      <planeGeometry args={[5, 2.8]} />
      <meshBasicMaterial attach="material" map={texture2} toneMapped={false}/>
    </mesh>
    </group>
    

    <group
    position={[0 , 2*FLOOR_HEIGHT, 0]} 
    rotation={[0, -Math.PI / 3.5, 0]}
    ref={bloco03}
    >
      <mesh>  
      <boxGeometry args={[5.1, 2.9, 0.25]} />
      <meshBasicMaterial color='#445577' />
    </mesh>
    <mesh
    position={[0,0,0.126]}>  
      <planeGeometry args={[5, 2.8]} />
      <meshBasicMaterial attach="material" map={texture3} toneMapped={false}/>
    </mesh>
    </group>
    

    <group
    position={[0, 3*FLOOR_HEIGHT, 0]} 
    rotation={[0, -Math.PI / 12, 0]}
    ref={bloco04}
    >
      <mesh>  
      <boxGeometry args={[3.1, 2.35,  0.05]} />
      <meshBasicMaterial color='#333333' />
    </mesh>
    <mesh
    position={[0,0,0.051]}>  
      <planeGeometry args={[3, 2.25]} />
      <meshBasicMaterial attach="material" map={texture4} toneMapped={false}/>
    </mesh>
    </group>
    

    {/* <mesh position={[0, 0, 0]}>
      <boxGeometry />
      <meshMatcapMaterial />
    </mesh>
    <mesh position={[0, FLOOR_HEIGHT, 0]}>
      <boxGeometry />
      <meshMatcapMaterial />
    </mesh>
    <mesh position={[0, 2*FLOOR_HEIGHT, 0]}>
      <boxGeometry />
      <meshMatcapMaterial />
    </mesh>
    <mesh position={[0, 3*FLOOR_HEIGHT, 0]}>
      <boxGeometry />
      <meshMatcapMaterial />
    </mesh> */}

  </group>
  )

}

useGLTF.preload('./src/public/assets/bread_pack.glb')


// useGLTF.preload('./src/assets/italian_coffee_machine_moka.glb')
// useGLTF.preload('./src/assets/WawaOffice.glb')

// Assets CC Attribution:
// "FREE | Bread Pack (CS2)" (https://skfb.ly/oOIUZ) by 6lucius is licensed under Creative Commons Attribution (http://creativecommons.org/licenses/by/4.0/).